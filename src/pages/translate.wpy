<template>
  <view class="translate-container">

    <view class="translate-content">
      <textarea name="translate-textarea" class="{{isFocus?'textarea-focus':''}}" value="{{translationValue}}" cols="30"
                placeholder-style="{{isFocus?placeholderStyle:''}}" placeholder="请输入你需要翻译的文字.." maxlength="1000"
                @focus="changeFocus({{isFocus}})" @blur="changeFocus({{isFocus}})" @input="changeTextarea"></textarea>
      <view class="btn-upload" @tap.stop="uploadImage"><image src="https://png.icons8.com/metro/100/008BFF/upload-to-cloud.png"></image></view>
    </view>
    <view class="select">
      <picker mode="multiSelector" @change="multiPickerChange" @columnchange="multiPickerColumnChange" value="{{multiIndex}}" range="{{multiArray}}">
        <view class="picker">
          {{languageData[multiIndex[0]].name}} » {{languageData[multiIndex[1]].name}}
        </view>
      </picker>

      <view class="btn-tl" @tap="handleTranslation({{translationValue}})">翻译</view>
    </view>
    <image class="ic-down  animated {{isSearch?'fadeInDown':'hide'}}"
           src="//p53ff6x0c.bkt.clouddn.com/18-3-5/73372806.jpg"></image>

    <view class="translate-result animated {{isSearch?'fadeInDown':'hide'}}">
      <text class="result-title">翻译结果</text>
      <view class="result-query">
        <view class="text">{{translationResult.query}}</view>
        <tSpeak-sound :soundData.sync="sentence_mp3List" :index.sync="tSpeakUrl"></tSpeak-sound>
      </view>
      <view class="result-tl">
        <view class="text">
          {{translationResult.translationText}}
        </view>
        <speak-sound :soundData.sync="sentence_mp3List" :index.sync="SpeakUrl"></speak-sound>
      </view>

    </view>
    <dialog :isImageText.sync="isImageText"></dialog>
  </view>
</template>
<script>

  import wepy from 'wepy';
  import {getAccessToken, getImageToText, getTranslate} from '../utils/api';
  import {LanguageData,MultiArray} from '../utils/config';
  import Sound from '../components/sound';
  import Dialog from '../components/dialog'
  import {YoudaoTranslateConfig,LeanCloudConfig} from '../utils/config';
  const AV = require('../utils/av-weapp-min');
  const Base64 = require('../utils/Base64');
  import MD5 from '../utils/MD5';

  export default class Translate extends wepy.page {
    components = {
      "tSpeak-sound": Sound, //翻译语言
      "speak-sound": Sound, //源语言
      "dialog":Dialog
    };
    config = {
      navigationBarTitleText: '翻译'
    };

    data = {
      isFocus: false,
      isSearch: false,
      isImageText:false,
      downloadImageSrc:'',//网络图片src
      multiIndex: [0, 0],
      multiArray: MultiArray,
      languageData:LanguageData,
      fromToLanguage:{
        form:'Auto',
        to:'Auto',
      },
      translationValue: '', //textarea文本内容
      access_token: '',
      words_result:[
      ],
      placeholderStyle: 'color: #0080FF;',
      translationResult: {
        query: '',//源语言
        translationText: '',//翻译结果
      },
      SpeakUrl: 1,
      tSpeakUrl: 0,
      sentence_mp3List: []
    };
    methods = {
      changeTextarea(e) {
        this.translationValue = e.detail.value;
        this.$apply();
      },
      handleTranslation(value) {
        if (value == "" || value == null || !value) {
          wx.showToast({
            title: '你的输入为空',
            image: '../assets/img/ic-error.png',
            duration: 2000
          });
          return;
        }
        this.getTranslateResult(value);
      },
      changeFocus(boolean, event) {
        if (this.isSearch && event.type == "focus") { //搜索过一次又搜索
          console.log('你又搜索了',);
//            this.isSearch = false;
        }
        if (!boolean) {
          this.isFocus = true;
        }
        else if (boolean) {
          this.isFocus = false;
        }
        this.$apply();
      },
      multiPickerChange(e) {
        this.multiIndex[0] = e.detail.value[0];
        this.multiIndex[1] = e.detail.value[1]
        console.log(this.languageData);
        this.fromToLanguage = {
          form:this.languageData[e.detail.value[0]].key,
          to:this.languageData[e.detail.value[1]].key
        }
        this.$apply();
      },
      multiPickerColumnChange(e){
        console.log('修改的列为', e.detail.column, '，值为', e.detail.value);
      },
      //上传图片事件
      uploadImage(){
        const _this = this;
        wx.chooseImage({
          count: 1,
          sizeType: ['original', 'compressed'],
          sourceType: ['album', 'camera'],
          success: function(res) {
            var tempFilePath = res.tempFilePaths[0];
            new AV.File('file-name', {
              blob: {
                uri: tempFilePath,
              },
            }).save().then(
              (file)=>{
               _this.downloadImageSrc = file.url();
               _this.$apply();
               _this.getImageText(_this.downloadImageSrc);
              }
            ).catch(
              error=>{
                wx.showToast({
                  title: '抱歉,上传失败',
                  image: '../assets/img/ic-error.png',
                  duration: 1000
                });
              }

            );
          }
        });
      },
    };
    onLoad() {
      wx.showNavigationBarLoading();
      AV.init({
        appId: LeanCloudConfig.appId,
        appKey: LeanCloudConfig.appKey,
      });
      wx.hideNavigationBarLoading();
    }

    events = {
      "translationValue"(value){
        this.translationValue = value;
      }
    };
    //获取翻译结果
    async getTranslateResult(value) {
      const _this = this;
      let salt = Math.floor(Math.random() * 10);
      let sign = `${YoudaoTranslateConfig.appKey}${value}${salt}${YoudaoTranslateConfig.SecretKey}`;
      let params = {
        q: encodeURI(value),
        salt: encodeURI(salt),
        sign: encodeURI(MD5.MD5(sign)),
        from: _this.fromToLanguage.form,
        to:_this.fromToLanguage.to
      }
      await getTranslate(params).then(result => {
        _this.translationResult = {
          query: result.data.query,
          translationText: result.data.translation[0],
        }
        _this.sentence_mp3List = [result.data.speakUrl, result.data.tSpeakUrl];
        this.isSearch = true;
        this.$apply();
      }).catch(error => {
        wx.showToast({
          title: '抱歉,搜索不到',
          image: '../assets/img/ic-error.png',
          duration: 1000
        });
      })
    }

    //获取图片文字识别API
    async getImageText(imageSrc) {
      const _this = this;
      await getAccessToken().then(res => {
        _this.access_token = res.data.access_token;
      });

      let params = {
        access_token: _this.access_token,
        data: {
          access_token: _this.access_token,
          url: imageSrc
        },
        header: {
          "Content-Type": "application/x-www-form-urlencoded"
        },
        method: "POST"
      }
      getImageToText(params).then(result => {
        _this.words_result = result.data.words_result;
        _this.$broadcast('wordsResult',result.data.words_result);
        _this.isImageText = true;
        _this.$apply();
        console.log(_this.words_result);
      });

    }
  }

</script>

<style lang="scss" rel="stylesheet/scss">
  @function rpx($value) {
    @return $value * 1rpx;
  }

  page {
    background-color: rgba(0, 0, 0, .05);
    width: 100%;
    height: 100%;
  }

  .translate-container {
    width: 100%;
    padding: rpx(20) rpx(15) 0;
    .translate-content{
      position: relative;
      [name="translate-textarea"] {
        width: 100%;
        margin: 0 auto;
        border-radius: rpx(15);
        font-weight: 300;
        font-size: rpx(30);
        padding: rpx(15) rpx(20);
        box-shadow: rpx(10) rpx(10) rpx(5) #eeeeee;
        border: 1px solid #eeeeee;
        background-color: white;
        height: rpx(460);
        transition: all .3s;
      }
      .textarea-focus {
        box-shadow: rpx(5) rpx(5) rpx(5) rgba(0, 143, 255, .5);
        border: 1px solid #008FFF;
        color: #008FFF;
      }
      .btn-upload{
        padding:rpx(25);
        z-index: 10;
        border-radius: rpx(30);
        box-shadow: rpx(5) rpx(5) rpx(10) rgba(0,0,0,.1);
        background-color: rgba(0,0,0,.05);
        text-align: center;
        position: absolute;
        bottom:rpx(20);
        right:rpx(20);
        image{
          width:rpx(60);
          height:rpx(60);
        }
      }
    }
    .select {
      display: flex;
      width: 100%;
      align-items: center;
      justify-content: space-around;
      margin: rpx(20) auto;
      height: rpx(80);
      line-height: rpx(80);
      picker{
        width: 35%;
        border: 1px solid #eee;
        background-color: white;
        text-align: center;
        border-radius: rpx(10);
      }

      .btn-tl {
        width: 50%;
        text-align: center;

        background: linear-gradient(172deg, #008FFF 0%, #0080FF 100%);
        font-size: rpx(35);
        color: white;
        box-shadow: rpx(10) rpx(10) rpx(2) rgba(0, 143, 255, .5);
        border-radius: rpx(10);
      }
    }
    .ic-down {
      width: rpx(80);
      height: rpx(80);
      display: block;
      margin: rpx(20) auto;
    }
    .translate-result {
      width: 100%;
      border-radius: rpx(15);
      background-color: white;
      margin: rpx(20) auto rpx(30);
      padding: rpx(10) rpx(30) rpx(50);
      border: 1px solid #eeeeee;
      .result-title {
        display: block;
        text-align: center;
        font-size: rpx(35);
        font-weight: normal;
        height: rpx(60);
        line-height: rpx(60);
      }
      .result-tl {
        color: #000;
        font-weight: normal;
        font-size: rpx(32);
        display: flex;
        align-items: center;
        justify-content: space-between;
        .text {
          margin-right: rpx(20);
        }
      }
      .result-query {
        color: #888;
        margin-bottom: rpx(20);
        font-size: rpx(32);
        display: flex;
        align-items: center;
        justify-content: space-between;
        .text {
          margin-right: rpx(40);
        }
      }
    }
  }
</style>
